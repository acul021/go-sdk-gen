// Code generated by `go-sdk-gen`. DO NOT EDIT.

package shared

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"time"

	"codegen/client"
)

// AllEnumTypes is a schema definition.
type AllEnumTypes struct {
	IntegerEnum AllEnumTypesIntegerEnum `json:"integer_enum"`
	// Format: int64
	IntegerWithFormatEnum *AllEnumTypesIntegerWithFormatEnum `json:"integer_with_format_enum,omitempty"`
	NumberEnum            AllEnumTypesNumberEnum             `json:"number_enum"`
	NumberWithFormatEnum  *AllEnumTypesNumberWithFormatEnum  `json:"number_with_format_enum,omitempty"`
	StringEnum            AllEnumTypesStringEnum             `json:"string_enum"`
}

// AllEnumTypesIntegerEnum is a schema definition.
type AllEnumTypesIntegerEnum int

const (
	AllEnumTypesIntegerEnum1 AllEnumTypesIntegerEnum = 1
	AllEnumTypesIntegerEnum2 AllEnumTypesIntegerEnum = 2
	AllEnumTypesIntegerEnum3 AllEnumTypesIntegerEnum = 3
)

// AllEnumTypesIntegerWithFormatEnum is a schema definition.
// Format: int64
type AllEnumTypesIntegerWithFormatEnum int64

const (
	AllEnumTypesIntegerWithFormatEnum1E18 AllEnumTypesIntegerWithFormatEnum = 1000000000000000000
	AllEnumTypesIntegerWithFormatEnum2E18 AllEnumTypesIntegerWithFormatEnum = 2000000000000000000
)

// AllEnumTypesNumberEnum is a schema definition.
type AllEnumTypesNumberEnum float64

const (
	AllEnumTypesNumberEnum11 AllEnumTypesNumberEnum = 1.1
	AllEnumTypesNumberEnum22 AllEnumTypesNumberEnum = 2.2
	AllEnumTypesNumberEnum33 AllEnumTypesNumberEnum = 3.3
)

// AllEnumTypesNumberWithFormatEnum is a schema definition.
type AllEnumTypesNumberWithFormatEnum float64

const (
	AllEnumTypesNumberWithFormatEnum1618 AllEnumTypesNumberWithFormatEnum = 1.618
	AllEnumTypesNumberWithFormatEnum314  AllEnumTypesNumberWithFormatEnum = 3.14
)

// AllEnumTypesStringEnum is a schema definition.
type AllEnumTypesStringEnum string

const (
	AllEnumTypesStringEnumValue1 AllEnumTypesStringEnum = "value1"
	AllEnumTypesStringEnumValue2 AllEnumTypesStringEnum = "value2"
	AllEnumTypesStringEnumValue3 AllEnumTypesStringEnum = "value3"
)

// AllStringFormats is a schema definition.
type AllStringFormats struct {
	// Format: date
	Date Date `json:"date"`
	// Format: date_time
	DateTime string `json:"date_time"`
	// Format: time
	Time Time `json:"time"`
}

// GetDeprecatedBody is a schema definition.
type GetDeprecatedBody struct {
	// Deprecated: Use other - non-deprecated - field instead.
	Param *string `json:"param,omitempty"`
}

// GetAllStringFormatsParams: query parameters for getAllStringFormats
type GetAllStringFormatsParams struct {
	Date *Date
	Time *Time
}

// QueryValues converts [GetAllStringFormatsParams] into [url.Values].
func (p *GetAllStringFormatsParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.Date != nil {
		q.Set("date", p.Date.String())
	}

	if p.Time != nil {
		q.Set("time", p.Time.String())
	}

	return q
}

// GetDeprecatedParams: query parameters for getDeprecated
type GetDeprecatedParams struct {
	Param *string
}

// QueryValues converts [GetDeprecatedParams] into [url.Values].
func (p *GetDeprecatedParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.Param != nil {
		q.Set("param", *p.Param)
	}

	return q
}

// GetDeprecated200Response is a schema definition.
type GetDeprecated200Response struct {
	// Deprecated: Use other - non-deprecated - field instead.
	Param *string `json:"param,omitempty"`
}

type Date struct{ time.Time }

func (d Date) String() string {
	return d.Format(time.DateOnly)
}

const jsonDateFormat = `"` + time.DateOnly + `"`

var _ json.Unmarshaler = (*Date)(nil)

func (d *Date) UnmarshalJSON(b []byte) (err error) {
	date, err := time.Parse(jsonDateFormat, string(b))
	if err != nil {
		return err
	}
	d.Time = date
	return
}

var _ json.Marshaler = (*Date)(nil)

func (d Date) MarshalJSON() ([]byte, error) {
	return []byte(d.Time.Format(jsonDateFormat)), nil
}

type Time struct{ time.Time }

func (t Time) String() string {
	return t.Format(time.TimeOnly)
}

const jsonTimeFormat = `"` + time.TimeOnly + `"`

var _ json.Unmarshaler = (*Time)(nil)

func (t *Time) UnmarshalJSON(b []byte) (err error) {
	date, err := time.Parse(jsonTimeFormat, string(b))
	if err != nil {
		return err
	}
	t.Time = date
	return
}

var _ json.Marshaler = (*Time)(nil)

func (t Time) MarshalJSON() ([]byte, error) {
	return []byte(t.Time.Format(jsonTimeFormat)), nil
}

type SharedService struct {
	c *client.Client
}

func NewSharedService(c *client.Client) *SharedService {
	return &SharedService{c: c}
}

// GetAllStringFormats: Get all string formats
func (s *SharedService) GetAllStringFormats(ctx context.Context, params GetAllStringFormatsParams) (*AllStringFormats, error) {
	path := fmt.Sprintf("/string-formats")

	resp, err := s.c.Call(ctx, http.MethodGet, path, client.WithQueryValues(params.QueryValues()))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v AllStringFormats
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// GetAllEnumTypes: Get all enum types
func (s *SharedService) GetAllEnumTypes(ctx context.Context) (*AllEnumTypes, error) {
	path := fmt.Sprintf("/enums")

	resp, err := s.c.Call(ctx, http.MethodGet, path)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v AllEnumTypes
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

// GetDeprecated: Get deprecated
//
// Deprecated: Use other - non-deprecated - endpoint instead.
func (s *SharedService) GetDeprecated(ctx context.Context, body GetDeprecatedBody, params GetDeprecatedParams) (*GetDeprecated200Response, error) {
	path := fmt.Sprintf("/deprecated")

	resp, err := s.c.Call(ctx, http.MethodGet, path, client.WithJSONBody(body), client.WithQueryValues(params.QueryValues()))
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v GetDeprecated200Response
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}
